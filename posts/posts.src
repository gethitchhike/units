<?php
class Post{
    public $Title;
    public function GetSlug(){
        return str_replace(array("."),array(""),$this->Title);
    }
    public $Filename;
    public $WebFilename;
    public $Content;
    public $Date;
    public $Author;
    public $Image;
    public $Tags;
    public $Hidden;
    public $Tree;
}
class Posts implements IOnDemandUNit{
    public function GetFiles(){
        return array("posts.php","posts.hm");
    }
    public function Requires(){
        return array();
    }
    public function GetVersion(){
        return "0.5";
    }
    public function GetName(){
        return "Posts";
    }
    public function GetFileList($path,$filter = ".md"){
        $list = array();
        $files = scandir($path);
        $blacklist = array(".","..");
        foreach($files as $file){
            if (!in_array($file,$blacklist)){
                $dir = (is_dir($path.$file."/"));
                if ($dir){
                    $list = array_merge($this->GetFileList($path.$file."/"),$list);
                }else if (\BTRString::EndsWith($file,$filter,true)){
                    $list[] = $path.$file;
                }
            }
        }
        return $list;
    }
    public function Run($filter = ".md"){
        global $blog;
        $files = $this->GetFileList(__CONTENTPATH__,$filter); 
        $posts = array();
        foreach($files as $file){
            $content =  file_get_contents($file);
            $post = new \Post();

            
            $post->Title = $this->GetPostTitle($content,$file);

            $post->Content =$this->GetPostContent($content);
            $matches = array();
            //Set post date
            if (preg_match("/~date\((?<date>[^)]+)\)/",$post->Content,$matches)){
                $date = $matches["date"];
                $post->Date = strtotime($date);
                $post->Content = str_replace($matches[0],"",$post->Content);

            }
            else{
                $post->Date = filectime($file);
            }
            $matches = array();
            //set post image
            if (preg_match("/~image\((?<image>[^)]+)\)/",$post->Content,$matches)){
                $path = $matches["image"];
                $post->Image = $path;
                $post->Content = str_replace($matches[0],"",$post->Content);
            }
            //Get Author
            foreach($blog->Authors as $author){
                if (\BTRString::Contains($post->Content,$author->Signature,true)){
                    $post->Author = $author;
                    $post->Content = str_replace($author->Signature,"",$post->Content);
                    break;
                }
            }
            $propertyPattern = "/~hidden/";
            $matches = array();
            $found = preg_match($propertyPattern,$post->Content);
            $post->Hidden = $found == 1 || $post->Date > time();  
            $post->Content = str_replace("~hidden","",$post->Content);  
            //Set other tags
            $tagsPattern = "/\s~(?<tag>[a-zA-Z0-9]+)/";
            $matches = array();
            preg_match_all($tagsPattern,$post->Content,$matches);
            $post->Tags =array();
            foreach($matches["tag"] as $match){
                if (!empty($match)){
                    $post->Content = str_replace("~".$match,"",$post->Content);
                    $post->Tags[] = strtolower($match);
                }
            }
            if (is_null($post->Author)){
                $post->Author = $blog->Authors[0];
            }
            $post->Filename = str_replace(__CONTENTPATH__,"",$file);
            $post->Tree = strpos($post->Filename,"/") !== false ?  explode("/",dirname($post->Filename)) : array();
            $post->WebFilename = urlencode(str_replace(array(".smd",".md"), "",str_replace("/","\\",$post->Filename)));
            $posts[] = $post;
        }
        usort($posts,function($a,$b){
            return  ($a->Date < $b->Date) ? 1 : -1;
        });
        return  $posts;
    }
    private function GetPostTitle($content,$filename){
        $lines = explode("\n",$content);
        
        if (count($lines) == 0 || !\BTRString::StartsWith($lines[0],"#",true)){
            return $filename;
        }
        else{
            return trim(str_replace("#","",$lines[0]));
        }
    }
    private function GetPostContent($content){
        $lines = explode("\n",$content);
        return str_replace($lines[0],"",$content);
    }
}
